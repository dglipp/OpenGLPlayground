#include <GLEW/glew.h>
#include <GLFW/glfw3.h>

#include <VENDOR/GLM/glm.hpp>
#include <VENDOR/GLM/gtc/matrix_transform.hpp>
#include <VENDOR/IMGUI/imgui.h>
#include <VENDOR/IMGUI/imgui_impl_glfw.h>
#include <VENDOR/IMGUI/imgui_impl_opengl3.h>

#include <INTERNAL/Renderer.h>
#include <INTERNAL/IndexBuffer.h>
#include <INTERNAL/VertexBuffer.h>
#include <INTERNAL/VertexArray.h>
#include <INTERNAL/Shader.h>
#include <INTERNAL/VertexBufferLayout.h>
#include <INTERNAL/Texture.h>

#include <random>
#include <iostream>
#include <math.h>

int main(void)
{
    GLFWwindow *window;

    if (!glfwInit())
        return -1;

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);


    window = glfwCreateWindow(1400, 1000, "OpenGL Test Window", NULL, NULL);
    if (!window)
    {
        glfwTerminate();
        return -1;
    }


    glfwMakeContextCurrent(window);
    glfwSwapInterval(1);

    if (glewInit() != GLEW_OK)
    {
        std::cout << "[GLEW ERROR]: glew not ok" << std::endl;
    }
    const char* glsl_version = "#version 330 core";
    std::cout << glGetString(GL_VERSION) << std::endl;

    float positions[] = {
        -200.0f, -200.0f, 0.0f, 0.0f,
        200.0f, -200.0f, 1.0f, 0.0f,
        200.0f, 200.0f, 1.0f, 1.0f,
        -200.0f, 200.0f, 0.0f, 1.0f,
    };

    unsigned int indices[] = {
        0, 1, 2,
        2, 3, 0
    };

    GLCall(glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA));
    GLCall(glEnable(GL_BLEND));

    VertexArray va;
    VertexBuffer vb(positions, 4 * 4 * sizeof(float));
    VertexBufferLayout layout;

    layout.Push<float>(2);
    layout.Push<float>(2);
    va.AddBuffer(vb, layout);

    IndexBuffer ib(indices, 6);

    glm::mat4 proj = glm::ortho(0.0f, 1400.0f, 0.0f, 1000.0f, -1.0f, 1.0f);
    glm::mat4 view = glm::translate(glm::mat4(1.0f), glm::vec3(0, 0, 0));


    Shader shader("../res/shaders/basic.shader");
    shader.Bind();
    shader.SetUniform4f("u_Color", 0.8f, 0.3f, 0.0f, 0.8f);
    Renderer renderer;

    Texture texture("../res/textures/trump.png");
    texture.Bind(0);
    shader.SetUniform1i("u_Texture", 0);

    va.Unbind();
    vb.Unbind();
    ib.Unbind(); 
    shader.Unbind();
    float r = 0.0f;

    ImGui::CreateContext();
    ImGui::StyleColorsDark();
    ImGui_ImplGlfw_InitForOpenGL(window, true);
    ImGui_ImplOpenGL3_Init(glsl_version);

    bool show_demo_window = true;
    ImVec4 clear_color = ImVec4(0.45f, 0.55f, 0.60f, 1.00f);

    glm::vec3 translationA(300, 300, 0);
    glm::vec3 translationB(600, 300, 0);

    while (!glfwWindowShouldClose(window))
    {
        renderer.Clear();

        ImGui_ImplOpenGL3_NewFrame();
        ImGui_ImplGlfw_NewFrame();
        ImGui::NewFrame();



        shader.Bind();
        // shader.SetUniform4f("u_Color", sin(5*r), cos(2*r), sin(3*r), 1.0f);
        {
            glm::mat4 model = glm::translate(glm::mat4(1.0f), translationA);
            glm::mat4 MVP = proj * view * model;
            shader.SetUniformMat4f("u_MVP", MVP);
            renderer.Draw(va, ib, shader);
        }

        {
            glm::mat4 model = glm::translate(glm::mat4(1.0f), translationB);
            glm::mat4 MVP = proj * view * model;
            shader.SetUniformMat4f("u_MVP", MVP);
            renderer.Draw(va, ib, shader);
        }


        {
            static float f = 0.0f;
            static int counter = 0;

            ImGui::Begin("Debug frame");
            ImGui::SetWindowFontScale(1.8);

            ImGui::SliderFloat("TranslationA", &translationA.x, 0.0f, 1400.0f);
            ImGui::SliderFloat("TranslationB", &translationB.x, 0.0f, 1400.0f);

            ImGui::ColorEdit3("clear color", (float*) &clear_color);

            if (ImGui::Button("Button"))
                counter++;
            ImGui::SameLine();
            ImGui::Text("counter = %d", counter);

            ImGui::Text("Application average %.3f ms/frame (%.1f FPS)", 1000.0f / ImGui::GetIO().Framerate, ImGui::GetIO().Framerate);
            ImGui::End();
        }

        ImGui::Render();
        ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());


        glfwSwapBuffers(window);

        glfwPollEvents();
    }

    ImGui_ImplOpenGL3_Shutdown();
    ImGui_ImplGlfw_Shutdown();
    ImGui::DestroyContext(nullptr);
    glfwTerminate();
    return 0;
}